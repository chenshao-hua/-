题目描述：
实现一个Trie(前缀树)，包含insert，search，和startsWith这三个操作。
示例：
Trie trie=new Trie();

trie.insert("apple");
trie.search("apple");//返回true
trie.search("app");//返回false
trie.startsWith("app");//返回true
trie.insert("app");
trie.search("app"); //返回true

你可以假设所有的输入都是由小写字母a-z构成的。保证所有输入均为非空字符串。

解题思路：
这里考查的Trie前缀树是一种有序树，用于保存关联数组，其中的键通常是字符串。
Trie也叫单词查找树，这一高效的数据结构有非常多的应用：
自动补全、拼写检查、IP路由（最长前缀匹配）、九宫格打字预测、单词预测等。

Trie树的节点结构：
Trie树是一个有根的树，其节点具有以下字段：
（1）最多R个指向子节点的链接，其中每个链接对应字母表数据集中的一个字母。本文中假定R为26，小写拉丁字母的数量。
（2）布尔字段，以指定节点是对应键的结尾还是只是键前缀。

Trie树中最常见的两个操作是键的插入和查找。

向Trie树中插入键：
我们通常通过搜索Trie树来插入一个键。我们从根开始搜索它对应于第一个键字符的链接。有两种情况：
（1）链接存在。沿着链接移动到树的下一个子层。算法继续搜索下一个键字符。
（2）链接不存在。创建一个新的节点，并将它与父节点的链接相连，该链接与当前的键字符相匹配。
重复以上步骤，直到到达键的最后一个字符，然后将当前节点标记为结束节点，算法完成。

在Trie树中查找键：
每个键在Trie中表示为从根节点到内部节点或者叶子节点的路径。我们用第一个键字符从根开始。检查当前节点中键字符对应的链接。有两种情况：
（1）存在链接。我们移动到该链接后面的路径中的下一个节点，并继续搜索下一个键字符。
（2）不存在链接。若已无键字符，且当前节点标记为IsEnd，则返回true。否则有两种情况均返回false:
a.还有键字符剩余，但无法跟随Trie树的键路径，找不到键。
b.没有键字符剩余，但当前节点没有标记为IsEnd。也就是说，待查找键只是Trie树中另一个键的前缀。

查找Trie树中的键前缀：
该方法和查找基本相似，甚至更简单因为不需要考虑当前Trie节点是否"IsEnd"标记，因为我们搜索的是键的前缀，而不是整个键。
